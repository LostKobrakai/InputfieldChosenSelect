<?php

/**
 * InputfieldChosenSelect module
 *
 * Inputfield for the ProcessWire FieldtypePage. Provides an alternative
 * tagging interface.
 *
 * Copyright (C) 2015 Benjamin Milde
 * Licensed under MIT License, see LICENSE.md
 * 
 * http://www.kobrakai.de
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class InputfieldChosenSelect extends InputfieldSelectMultiple implements InputfieldHasArrayValue{

	protected $chosenOptions = array();

	public static function getModuleInfo() {
		return array(
			'title' => __('InputfieldChosenSelect', __FILE__), // Module Title
			'summary' => __('Inputfield for the ProcessWire FieldtypePage. Provides an alternative tagging interface.', __FILE__), // Module Summary
			'version' => 100, 
			);
	}

	public function init() {
		parent::init();
		wire('modules')->get('JqueryCore'); // required by jQuery UI
		wire('modules')->get('JqueryUI');

		$this->setChosenOption('width', "100%");
	}

	public function setChosenOption($key, $value) {
		$this->chosenOptions[$key] = $value; 
	}

	public function ___render() {
		$class = $this->className(); 
		$info = self::getModuleInfo();
		$ver = $info['version'];

		$this->config->scripts->add($this->config->urls->$class . "chosen/chosen.jquery.min.js?v=$ver");
		$this->config->styles->add($this->config->urls->$class . "chosen/chosen.min.css?v=$ver");

		$selectedOptions = $this->attr('value');

		foreach($selectedOptions as $id) {
			if(!isset($this->options[$id])) continue; 
			$label = $this->options[$id]; 
			unset($this->options[$id]); 	
			$this->addOption($id, $label); 
		}

		$this->config->js($this->id, $this->chosenOptions);

		return parent::___render();
	}

	public function ___install() {
		$data = $this->modules->getModuleConfigData("InputfieldPage");
		array_push($data["inputfieldClasses"], $this->className());
		$this->modules->saveModuleConfigData("InputfieldPage", $data);
	}

	public function ___uninstall() {
		$fields = wire('fields')->find("type=FieldtypePage");

		foreach($fields as $field){
			if($field->inputfield !== $this->className()) $fields->remove($field);
		}

		$this->warning($this->className()." was used in following fields: ".$fields->implode(", ", "name"));

		$data = $this->modules->getModuleConfigData("InputfieldPage");

		if(in_array($this->className(), $data["inputfieldClasses"])){
			$key = array_search($this->className(), $data["inputfieldClasses"]);
			unset($data["inputfieldClasses"][$key]);

			$this->modules->saveModuleConfigData("InputfieldPage", $data);
		}
	}
	
}
